#!/bin/bash

# GitHub SSH Setup Script for macOS
# This script installs Xcode Command Line Tools and creates SSH keys for GitHub

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if Xcode Command Line Tools are installed
check_xcode_tools() {
    if xcode-select -p &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# Function to install Xcode Command Line Tools
install_xcode_tools() {
    print_status "Installing Xcode Command Line Tools..."
    
    # Trigger the installation
    xcode-select --install
    
    print_warning "Please complete the Xcode Command Line Tools installation in the popup window."
    print_warning "Press any key after the installation is complete..."
    read -n 1 -s
    
    # Verify installation
    if check_xcode_tools; then
        print_success "Xcode Command Line Tools installed successfully!"
    else
        print_error "Xcode Command Line Tools installation failed or incomplete."
        exit 1
    fi
}

# Function to get device name
get_device_name() {
    scutil --get ComputerName | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g'
}

# Function to generate SSH key
generate_ssh_key() {
    local email=$1
    local device_name=$(get_device_name)
    local key_name="id_ed25519_gh_${device_name}"
    local key_path="$HOME/.ssh/${key_name}"
    
    print_status "Generating SSH key for GitHub..."
    print_status "Device name: $device_name"
    print_status "Key name: $key_name"
    
    # Create .ssh directory if it doesn't exist
    mkdir -p "$HOME/.ssh"
    chmod 700 "$HOME/.ssh"
    
    # Generate SSH key
    ssh-keygen -t ed25519 -C "$email" -f "$key_path" -N ""
    
    # Set proper permissions
    chmod 600 "$key_path"
    chmod 644 "${key_path}.pub"
    
    print_success "SSH key generated: $key_path"
    return 0
}

# Function to add SSH key to macOS keychain
add_to_keychain() {
    local device_name=$(get_device_name)
    local key_name="id_ed25519_gh_${device_name}"
    local key_path="$HOME/.ssh/${key_name}"
    
    print_status "Adding SSH key to macOS keychain..."
    
    # Add to keychain
    ssh-add --apple-use-keychain "$key_path"
    
    # Create or update SSH config
    local ssh_config="$HOME/.ssh/config"
    
    # Check if Host github.com already exists in config
    if [[ -f "$ssh_config" ]] && grep -q "Host github.com" "$ssh_config"; then
        print_warning "GitHub host configuration already exists in ~/.ssh/config"
        print_warning "Please manually update your SSH config if needed."
    else
        print_status "Adding GitHub configuration to ~/.ssh/config..."
        
        cat >> "$ssh_config" << EOF

# GitHub configuration
Host github.com
    AddKeysToAgent yes
    UseKeychain yes
    IdentityFile $key_path

EOF
        chmod 600 "$ssh_config"
        print_success "SSH config updated"
    fi
    
    print_success "SSH key added to keychain successfully!"
}

# Function to display public key
display_public_key() {
    local device_name=$(get_device_name)
    local key_name="id_ed25519_gh_${device_name}"
    local pub_key_path="$HOME/.ssh/${key_name}.pub"
    
    print_success "SSH key setup complete!"
    echo ""
    print_status "Your public key (copy this to GitHub):"
    echo "----------------------------------------"
    cat "$pub_key_path"
    echo "----------------------------------------"
    echo ""
    print_status "To add this key to GitHub:"
    echo "1. Go to https://github.com/settings/ssh/new"
    echo "2. Give your key a title (e.g., '${device_name}')"
    echo "3. Paste the public key above"
    echo "4. Click 'Add SSH key'"
    echo ""
    print_status "To test your connection:"
    echo "ssh -T git@github.com"
}

# Main function
main() {
    echo "=================================================="
    echo "    GitHub SSH Setup Script for macOS"
    echo "=================================================="
    echo ""
    
    # Check if running on macOS
    if [[ "$(uname)" != "Darwin" ]]; then
        print_error "This script is designed for macOS only."
        exit 1
    fi
    
    # Check for Xcode Command Line Tools
    if check_xcode_tools; then
        print_success "Xcode Command Line Tools are already installed."
    else
        install_xcode_tools
    fi
    
    # Get email for SSH key
    echo ""
    read -p "Enter your GitHub email address: " github_email
    
    if [[ -z "$github_email" ]]; then
        print_error "Email address is required."
        exit 1
    fi
    
    # Validate email format (basic)
    if [[ ! "$github_email" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
        print_error "Invalid email format."
        exit 1
    fi
    
    # Check if SSH key already exists
    local device_name=$(get_device_name)
    local key_name="id_ed25519_gh_${device_name}"
    local key_path="$HOME/.ssh/${key_name}"
    
    if [[ -f "$key_path" ]]; then
        print_warning "SSH key already exists: $key_path"
        read -p "Do you want to overwrite it? (y/N): " overwrite
        if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
            print_status "Using existing SSH key."
        else
            rm -f "$key_path" "${key_path}.pub"
            generate_ssh_key "$github_email"
        fi
    else
        generate_ssh_key "$github_email"
    fi
    
    # Add to keychain
    add_to_keychain
    
    # Display public key
    display_public_key
    
    print_success "Setup completed successfully!"
}

# Run the main function
main "$@"
